# NOTE: update this with your service name
service: moonmail-delivery

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-step-functions
  - serverless-pseudo-parameters

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

provider:
  name: aws
  profile: ${opt:profile}
  runtime: nodejs8.10
  stage: ${opt:stage}
  region: ${opt:region}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - ses:*
        - s3:*
      Resource: "*"

stepFunctions:
  stateMachines:
  # Data gathering - gets data and returns only what's needed
    dataGathering:
      definition:
        Comment: "Gets all the data necessary to the delivery process"
        StartAt: GetCampaign
        States:
          GetCampaign:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getCampaign"
            ResultPath: "$.campaign"
            Next: GetUser
          GetUser:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getUser"
            ResultPath: "$.user"
            Next: GetList
          GetList:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getList"
            ResultPath: "$.list"
            Next: OrganizeData
          OrganizeData:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-organizeData"
            End: true
  # Data checks
    dataVerifier:
      definition: 
        Comment: "Checks all the data and reject anything out of place"
        StartAt: VerifyUserPlanLimits
        States:
          VerifyUserPlanLimits:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-verifyUserPlanLimits"
            ResultPath: "$.planLimits.status"
            Next: VerifyUserPlan
          VerifyUserPlan:
            Type: Choice
            Choices:
            - Variable: "$.planLimits.status"
              StringEquals: "passed"
              Next: PlanPassed
            - Variable: "$.planLimits.status"
              StringEquals: "rejected"
              Next: PlanRejected
            Default: PlanRejected
          PlanPassed:
            Type: Pass
            Next: VerifyUserScore
          PlanRejected:
            Type: Pass
            Next: NotifyUser
          NotifyUser:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-notifyUser"
            End: true
          VerifyUserScore:
            Type: Choice
            Choices: 
            - Variable: "$.reputationData.reputation"
              NumericLessThanEquals: 15
              Next: SetBlockedScore
            - And:
              - Variable: "$.reputationData.reputation"
                NumericGreaterThan: 15
              - Variable: "$.reputationData.reputation"
                NumericLessThanEquals: 30
              Next: SetBadScore
            - And:
              - Variable: "$.reputationData.reputation"
                NumericGreaterThan: 30
              - Variable: "$.reputationData.reputation"
                NumericLessThanEquals: 50
              Next: SetLowScore
            - And:
              - Variable: "$.reputationData.reputation"
                NumericGreaterThan: 50
              - Variable: "$.reputationData.reputation"
                NumericLessThanEquals: 75
              Next: SetMediumScore
            - Variable: "$.reputationData.reputation"
              NumericGreaterThan: 75
              Next: SetHighScore
          SetBlockedScore:
            Type: Pass
            Result: "lesser15"
            ResultPath: "$.sendingInfo.scoreProfile"
            Next: NotifyUser
          SetBadScore:
            Type: Pass
            Result: "bigger15Lesser30"
            ResultPath: "$.sendingInfo.scoreProfile"
            Next: NotifyUser
          SetLowScore:
            Type: Pass
            Result: "bigger30Lesser50"
            ResultPath: "$.sendingInfo.scoreProfile"
            Next: NotifyUser
          SetMediumScore:
            Type: Pass
            Result: "bigger50Lesser75"
            ResultPath: "$.sendingInfo.scoreProfile"
            Next: NotifyUser
          SetHighScore:
            Type: Pass
            Result: "bigger75"
            ResultPath: "$.sendingInfo.scoreProfile"
            Next: NotifyUser
    # Email Preparation
    emailPreparation:
      definition: 
        Comment: "Prepares (renders) all emails to be sent"
        StartAt: DefineBatchSize
        States:
          DefineBatchSize:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-defineBatchSize"
            ResultPath: "$.batchInfo"
            Next: ManageDataSize
          ManageDataSize:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-manageDataSize"
            ResultPath: "$.batchInfo"
            Next: GetRecipients
          GetRecipients:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-getRecipients"
            ResultPath: "$.recipientsList"
            Catch:
            - ErrorEquals:
              - States.DataLimitExceeded
              ResultPath: "$.errorInfo"
              Next: ReduceBatchSize
            - ErrorEquals:
              - States.Timeout
              ResultPath: "$.errorInfo"
              Next: ReduceBatchSize
            Next: RenderBodies
          # SaveRecipientsInS3:
          #   Type: Task
          #   Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-saveRecipientsInS3"
          #   ResultPath: "$.s3Data"
          #   Next: AllRecipients
          RenderBodies:
            Type: Task
            TimeoutSeconds: 120
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-renderBodies"
            ResultPath: "$.renderInfo"
            Catch:
            - ErrorEquals:
              - States.DataLimitExceeded
              ResultPath: "$.errorInfo"
              Next: ReduceBatchSize
            - ErrorEquals:
              - States.Timeout
              ResultPath: "$.errorInfo"
              Next: ReduceBatchSize
            Next: AllRecipients
          AllRecipients:
            Type: Task
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-allRecipients"
            Catch:
            - ErrorEquals:
              - NEW_EXECUTION_REQUIRED
              ResultPath: "$.errorInfo"
              Next: ProcessRemainingRecipients
            End: true
          ReduceBatchSize:
            Type: Pass
            Next: ManageDataSize
          ProcessRemainingRecipients:
            Type: Pass
            Next: ManageDataSize
          # --------------------------------------------------------------------------------------------------------------------
functions:
  getCampaign:
    handler: handler.getCampaign
  getUser:
    handler: handler.getUser
  getList:
    handler: handler.getList
  organizeData:
    handler: handler.organizeData
  manageDataSize:
    handler: handler.manageDataSize
  verifyUserPlanLimits:
    handler: handler.verifyUserPlanLimits
  notifyUser:
    handler: handler.notifyUser

  defineBatchSize:
    handler: handler.defineBatchSize
  
  getRecipients:
    handler: handler.getRecipients
  saveRecipientsInS3:
    handler: handler.saveRecipientsInS3
  renderBodies:
    handler: handler.renderBodies
  allRecipients:
    handler: handler.allRecipients