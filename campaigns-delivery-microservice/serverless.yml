service: MoonMail-v3-campaigns-delivery

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-aws-alerts

provider:
  name: aws
  runtime: nodejs8.10
  profile: ${opt:profile, self:custom.config.PROFILE}
  region: ${opt:region, self:custom.config.REGION}
  environment:
    REGION: ${opt:region, self:custom.config.REGION}
    DEBUG: ${self:custom.config.DEBUG}
    CAMPAIGNTABLE: MoonMail-v2-dev-campaigns
    USERTABLE: MoonMail-v2-dev-users
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: "*"

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}

  resourcesPrefix: ${self:service}-${self:custom.currentStage}

  config: ${file(./config.${self:custom.currentStage}.json)}

  webpack:
    webpackConfig: 'webpack.config.js'   # Name of webpack configuration file
    includeModules: true   # Node modules configuration for packaging
    packager: 'yarn'   # Packager that will be used to package your external modules

  serverless-offline:
    babelOptions:
      presets: ["es2015"]

  alerts:
    stages:
      - prod
    topics:
      alarm: 
        topic: ${self:service}-${opt:stage}-alerts-alarm
        notifications:
          - protocol: email
            endpoint: name@domain.com # Change this to your email address

package:
  individually: true

functions:
  startDeliveryProcess:
    handler: handler.startDeliveryProcess
    events:
      - http:
          path: version
          method: get
  findAndAttachUser:
    handler: handler.findAndAttachUser
    events:
      - sns:
          arn:
            Fn::Join:
              - ""
              - - "arn:aws:sns:"
                - Ref: "AWS::Region"
                - ":"
                - Ref: "AWS::AccountId"
                - ":user-topic"
          topicName: user-topic

resources:
  sns-user-topic:
    Type: AWS::SNS:Topic
    Properties:
      DisplayName: Attaches the user to the event
      TopicName: user-topic

